package com.github.strogiyotec.lightbox.jdbc.log;

import com.github.strogiyotec.lightbox.jdbc.session.ConnectionOf;
import org.slf4j.Logger;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;
import java.util.function.Supplier;

public final class LoggedConnection extends ConnectionOf {

    private final Logger log;

    public LoggedConnection(final Connection origin, final Logger logger) {
        super(origin);
        this.log = logger;
    }

    public LoggedConnection(final Supplier<Connection> origin, final Supplier<Logger> logger) {
        super(origin);
        this.log = logger.get();
    }

    @Override
    public Statement createStatement() throws SQLException {
        final Statement statement = this.origin.createStatement();
        return null;
    }

    @Override
    public PreparedStatement prepareStatement(final String sql) throws SQLException {
        return super.prepareStatement(sql);
    }

    @Override
    public CallableStatement prepareCall(final String sql) throws SQLException {
        return super.prepareCall(sql);
    }

    @Override
    public String nativeSQL(final String sql) throws SQLException {
        return super.nativeSQL(sql);
    }

    @Override
    public void setAutoCommit(final boolean autoCommit) throws SQLException {
        super.setAutoCommit(autoCommit);
    }

    @Override
    public void commit() throws SQLException {
        super.commit();
    }

    @Override
    public void rollback() throws SQLException {
        super.rollback();
    }

    @Override
    public void close() throws SQLException {
        super.close();
    }

    @Override
    public void setReadOnly(final boolean readOnly) throws SQLException {
        super.setReadOnly(readOnly);
    }

    @Override
    public void setCatalog(final String catalog) throws SQLException {
        super.setCatalog(catalog);
    }

    @Override
    public void setTransactionIsolation(final int level) throws SQLException {
        super.setTransactionIsolation(level);
    }

    @Override
    public void clearWarnings() throws SQLException {
        super.clearWarnings();
    }

    @Override
    public Statement createStatement(final int resultSetType, final int resultSetConcurrency) throws SQLException {
        return super.createStatement(resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        return super.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        return super.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public void setTypeMap(final Map<String, Class<?>> map) throws SQLException {
        super.setTypeMap(map);
    }

    @Override
    public void setHoldability(final int holdability) throws SQLException {
        super.setHoldability(holdability);
    }

    @Override
    public Savepoint setSavepoint() throws SQLException {
        return super.setSavepoint();
    }

    @Override
    public Savepoint setSavepoint(final String name) throws SQLException {
        return super.setSavepoint(name);
    }

    @Override
    public void rollback(final Savepoint savepoint) throws SQLException {
        super.rollback(savepoint);
    }

    @Override
    public void releaseSavepoint(final Savepoint savepoint) throws SQLException {
        super.releaseSavepoint(savepoint);
    }

    @Override
    public Statement createStatement(final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        return super.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        return super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        return super.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
        return super.prepareStatement(sql, autoGeneratedKeys);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
        return super.prepareStatement(sql, columnIndexes);
    }

    @Override
    public PreparedStatement prepareStatement(final String sql, final String[] columnNames) throws SQLException {
        return super.prepareStatement(sql, columnNames);
    }

    @Override
    public Clob createClob() throws SQLException {
        return super.createClob();
    }

    @Override
    public Blob createBlob() throws SQLException {
        return super.createBlob();
    }

    @Override
    public NClob createNClob() throws SQLException {
        return super.createNClob();
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        return super.createSQLXML();
    }

    @Override
    public void setClientInfo(final String name, final String value) throws SQLClientInfoException {
        super.setClientInfo(name, value);
    }

    @Override
    public void setClientInfo(final Properties properties) throws SQLClientInfoException {
        super.setClientInfo(properties);
    }

    @Override
    public void setSchema(final String schema) throws SQLException {
        super.setSchema(schema);
    }

    @Override
    public void abort(final Executor executor) throws SQLException {
        super.abort(executor);
    }

    @Override
    public void setNetworkTimeout(final Executor executor, final int milliseconds) throws SQLException {
        super.setNetworkTimeout(executor, milliseconds);
    }
}
